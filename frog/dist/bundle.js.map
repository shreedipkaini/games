{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/frog_jumper.js","webpack:///./lib/game.js","webpack:///./lib/background.js","webpack:///./lib/bean.js","webpack:///./lib/mushroom.js","webpack:///./lib/player.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;ACnEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,E;;;;;;AC5DD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,iB;AACA,a;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,a;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,4B;;;;;;AC7BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0B;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wB","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const Game = require('./game.js');\n\nconst showHowTo = () => {\n    const ele = document.getElementById('info');\n    ele.classList.remove('hidden');\n}\n\nconst hideHowTo = () => {\n    const ele = document.getElementById('info');\n    ele.classList.add('hidden');\n}\n\nwindow.hideHowTo = hideHowTo;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gameCanvas = document.getElementById('game-canvas');\n    const gameCanvasContext = gameCanvas.getContext('2d');\n\n    const backgroundCanvas = document.getElementById('background-canvas');\n    const backgroundCanvasContext = backgroundCanvas.getContext('2d');\n\n    const openHowTo = document.getElementById('how-to');\n    openHowTo.addEventListener('click', showHowTo);\n\n    const closeHowTo = document.getElementById('close-how-to');\n    closeHowTo.addEventListener('click', hideHowTo);\n\n    // const foregroundCanvas = document.getElementById('foreground-canvas');\n    // const foregroundCanvasContext = foregroundCanvas.getContext('2d');\n\n    const game = new Game(\n        gameCanvasContext,\n        gameCanvas,\n        backgroundCanvasContext,\n        \"stop\",\n        hideHowTo\n        )\n    \n    game.draw();\n    window.addEventListener('keydown', game.jump);\n\n    const buttonReStart = document.getElementById(\"cover-die-button\")\n    const cover = document.getElementById(\"cover-die\")\n    const score = document.getElementById(\"score\")\n    function reStartGame() {\n        hideHowTo();\n        cover.style.display = \"none\";\n        score.innerText = \"0\"\n        const game = new Game(\n            gameCanvasContext,\n            gameCanvas,\n            backgroundCanvasContext,\n            \"start\",\n            hideHowTo\n        )\n        game.draw();\n        window.addEventListener('keydown', game.jump);\n    }\n\n    buttonReStart.addEventListener(\"click\", reStartGame)\n});","const Background = require('./background.js');\nconst Bean = require('./bean')\nconst Mushroom = require('./mushroom');\nconst Player = require('./player');\n\nclass Game {\n    constructor(ctx, gameCanvas, backgroundCtx, action, closeCb) {\n        this.backgroundCtx = backgroundCtx;\n        this.called = false;\n        this.ctx = ctx;\n        this.gameCanvas = gameCanvas;\n        this.start = action;\n        this.bounceMp3 = document.getElementById('bounce-mp3');\n        this.impactMp3 = document.getElementById('impact-mp3');\n        this.coinMp3 = document.getElementById('coin-mp3');\n        this.collisionWithBean = this.collisionWithBean.bind(this);\n        this.createBean = this.createBean.bind(this);\n        this.discardBean = this.discardBean.bind(this);\n        this.draw = this.draw.bind(this);\n        this.jump = this.jump.bind(this);\n        this.closeCb = closeCb;\n        this.createBackground(backgroundCtx);\n        this.createBean(gameCanvas,ctx);\n        this.createMushroom(ctx);\n        this.createPlayer(ctx);\n    }\n\n    jump(event) {\n        if (event.code === \"Space\" ) {\n            event.preventDefault();\n            if (!this.called) {\n                this.closeCb();\n                const m = document.getElementById(\"menu\")\n                if (m.dataset.check === \"off\") {\n                    if (this.start !== \"die\") {\n                        this.player.performJump();\n                        this.start = \"start\";\n                        this.called = true;\n                        let that = this;\n                        this.bounceMp3.play();\n                        setTimeout(() => {\n                            that.called = false;\n                         },350);\n                    }\n                } \n            } \n        }\n    }\n\n    createBackground() {\n        const backgroundImage = new Image();\n        backgroundImage.src = './assets/images/background.png';\n        this.background = new Background(this.backgroundCtx, backgroundImage, 0, 750, 0.8);\n        this.preBackground = new Background(this.backgroundCtx, backgroundImage, 0, 750, 0);\n    }\n\n    createPlayer() {\n        const frogImage = new Image();\n        frogImage.src = './assets/images/frog.png';\n        this.player = new Player(this.ctx, frogImage, 440,5);\n    }\n\n    createMushroom() {\n       const mushroomImage = new Image();\n       mushroomImage.src = './assets/images/mushroom.png';\n       this.mushroom1 = new Mushroom(this.ctx, mushroomImage, 800, 440, 4);\n       this.mushroom2 = new Mushroom(this.ctx, mushroomImage, 1200, 440, 4);\n    }\n\n    createBean() {\n        this.bean = new Bean(this.gameCanvas, this.ctx, 5, this.discardBean);\n    }\n\n    discardBean() {\n        this.bean.clean();\n        this.createBean();\n    }\n\n    draw() {\n        requestAnimationFrame(this.draw);\n        const score = document.getElementById(\"score\");\n        const info = document.getElementById(\"menu-info\");\n        if(this.start === \"stop\") {\n            this.preBackground.draw() ;\n            this.player.draw();\n            info.style.display = \"flex\";\n        } else if (this.start === \"start\") {\n            info.style.display = \"none\";\n            this.background.draw();\n            this.player.draw();\n            this.mushroom1.draw();\n            this.mushroom2.draw();\n            this.bean.draw();\n\n            // player position\n            const player = this.player.getPosition();\n            // mushroom positions\n            const mushrooms = [\n                this.mushroom1.getPosition(),\n                this.mushroom2.getPosition(),\n            ];\n\n            if(this.collisionWithBean(player)) {\n                this.coinMp3.play();\n                score.innerText = parseInt(score.innerText) + 100;\n                this.discardBean();\n            }\n           \n            const [playerX, playerY] = player;\n\n            // .some on [mushrooms], was there collision?\n            if (mushrooms.some(mushroom => {\n                let spacing = 80;\n                let tolerance = 50;\n                const [mushX, mushY] = mushroom;\n\n               if (mushX > playerX + spacing || playerX - mushX >= spacing) {\n                   // collision not possible\n                   return false;\n               } else {\n                   const xDifference = Math.abs(mushX - playerX);\n                   const yDifference = Math.abs(mushY - playerY);\n\n                   if (mushX - playerX < spacing) {\n                       return Math.sqrt((xDifference * xDifference) + (yDifference * yDifference)) < spacing;\n                   } else {\n                       return Math.sqrt((xDifference * xDifference) + (yDifference * yDifference)) < spacing / 3;\n                   }\n               }\n            })) {\n                // stop\n                this.stopPlaying();\n            } \n        } else if (this.start === \"die\") {\n            return;\n        }\n    }\n\n    collisionWithBean([playerX, playerY]) {\n        let playerSize = 100;\n        let beanSize = 10;\n        let [beanX, beanY] = this.bean.getPosition();\n\n        playerX += playerSize / 2;\n        playerY += playerSize / 2;\n        beanX += beanSize / 2;\n        beanY += beanSize / 2;\n\n        return Math.abs(playerX - beanX) + Math.abs(playerY - beanY) < (playerSize + beanSize) / 1.75;\n    }\n\n    stopPlaying() {\n        this.impactMp3.play();\n        this.start = \"die\";\n        const cover = document.getElementById(\"cover-die\");\n        cover.style.display = \"flex\";\n    }\n}\n\nmodule.exports = Game;\n","class Background {\n    constructor(ctx, image, posY, imageLength, speed) {\n        this.image = image;\n        this.speed = speed;\n        this.x = 0;\n        this.y = posY;\n        this.imageLength = imageLength;\n        this.ctx = ctx;\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, 800, 600);\n        // this.image.width = 100\n        // this.image.height = 100\n        this.ctx.drawImage(this.image, this.x, this.y, 820, 600);\n        this.ctx.drawImage(this.image, this.x + this.imageLength, this.y, 820, 600);\n        this.ctx.drawImage(this.image, this.x + this.imageLength * 2, this.y, 820, 600);\n        if (this.x <= -this.imageLength) {\n            this.x = 0;\n        }\n        this.scrollImage();\n    }\n\n    scrollImage() {\n        this.x -= this.speed;\n    }\n\n}\n\nmodule.exports = Background;","const heights = [250, 325, 400];\n\nclass Bean {\n    constructor(canvas, ctx, speed, discardCb) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.speed = speed;\n        this.x = canvas.width;\n        this.y = heights[Math.floor(3 * Math.random())];\n        this.getPosition = this.getPosition.bind(this)\n        this.clean = this.clean.bind(this)\n        this.discardCb = discardCb;\n    }\n\n    move() {\n        this.x -= this.speed;\n    }\n\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, 10, 0, 2 * Math.PI, true);\n        this.ctx.fillStyle = \"yellow\";\n        this.ctx.strokeStyle = \"yellow\";\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.move();\n        if (this.x < -10) {\n            // bean passed the left edge\n            this.discardCb();\n        }\n    }\n\n    getPosition() {\n        return [this.x, this.y];\n    }\n\n    clean() {\n        this.ctx.clearRect(this.x, this.y, 10, 10);\n    }\n}\n\nmodule.exports = Bean;","class Mushroom {\n    constructor(ctx, image,x, y, speed) {\n        this.ctx = ctx;\n        this.image = image;\n        this.x = x;\n        this.y = y;\n        this.speed = speed;\n        this.size = [100, 100];\n        this.getPosition = this.getPosition.bind(this);\n    }  \n\n    move() {\n        this.x -= this.speed;\n        setInterval(() => {\n            this.speed += 0.001\n        },20000)\n        if(this.x < -100) {\n            this.x = 800\n        } \n    }\n\n    draw(ctx) {\n        // this.ctx.clearRect(0, 0, 800, 600);\n        this.ctx.drawImage(this.image, this.x, this.y, this.size[0], this.size[1]);\n        this.move()\n    }\n\n    getPosition() {\n        return [this.x, this.y];\n    }\n}\n\nmodule.exports = Mushroom;","class Player {\n    constructor(ctx, image, posY,speed) {\n        this.ctx = ctx;\n        this.image = image;\n        this.speed = speed;\n        this.isJump = true\n        this.x = 100;\n        this.y = posY;\n        this.jumping = false;\n        this.size = [100,100];\n        this.jumpImage = this.jumpImage.bind(this);\n        this.jumping = false;\n        this.selfJumpImg = this.selfJumpImg.bind(this);\n        this.sefJumping = false;\n        this.getPosition = this.getPosition.bind(this);\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, 800, 600);\n        this.ctx.drawImage(this.image, this.x, this.y, this.size[0], this.size[1]);\n    }\n\n    selfJump() {\n        this.jumping = true;\n        this.jumpImage()\n    }\n\n    selfJumpImg() {\n        const gravity = 0.80;\n        const initialSpeed = 42;\n        if (this.y > 600 && this.jumping) {\n            this.y -= initialSpeed - gravity;\n            requestAnimationFrame(this.selfJumpImg)\n        } else {\n            this.jumping = false\n            if (this.y >= 440) {\n                return\n            } else {\n                this.y += this.speed;\n                requestAnimationFrame(this.selfJumpImg)\n            }\n        }\n    }\n\n    performJump() {\n        this.jumping = true;\n        this.jumpImage()\n    }\n\n    jumpImage() {\n        const gravity = 0.40;\n        const initialSpeed = 12;\n        if (this.y > 200 && this.jumping) {\n            this.y -= initialSpeed - gravity ;\n            requestAnimationFrame(this.jumpImage)\n        } else {\n            this.jumping = false\n            if (this.y >= 440) {\n                return\n            } else {\n                this.y += this.speed;\n                requestAnimationFrame(this.jumpImage)\n            }\n        }\n    }\n\n    getPosition() {\n        return [this.x, this.y];\n    }\n}\n\nmodule.exports = Player;"],"sourceRoot":""}